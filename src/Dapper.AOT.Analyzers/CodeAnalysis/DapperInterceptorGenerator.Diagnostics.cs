using Microsoft.CodeAnalysis;

namespace Dapper.CodeAnalysis;

partial class DapperInterceptorGenerator
{
    internal sealed class Diagnostics : DiagnosticsBase
    {

        internal static readonly DiagnosticDescriptor
        InterceptorsGenerated = LibraryHidden("DAP000", "Interceptors generated", "Dapper.AOT handled {0} of {1} enabled call-sites using {2} interceptors, {3} commands and {4} readers"),
        UnsupportedMethod = LibraryInfo("DAP001", "Unsupported method", "The Dapper method '{0}' is not currently supported by Dapper.AOT"),
        //UntypedResults = new("DAP002", "Untyped result types",
        //    "Dapper.AOT does not currently support untyped/dynamic results", Category.Library, DiagnosticSeverity.Info, true),
        InterceptorsNotEnabled = LibraryWarning("DAP003", "Interceptors not enabled",
            "Interceptors are an experimental feature, and requires that '<Features>InterceptorsPreview</Features>' be added to the project file"),
        LanguageVersionTooLow = LibraryWarning("DAP004", "Language version too low", "Interceptors require at least C# version 11"),
        DapperAotNotEnabled = LibraryInfo("DAP005", "Dapper.AOT not enabled",
            "Candidate Dapper methods were detected, but none have Dapper.AOT enabled; [DapperAot] can be added at the method, type, module or assembly level (for example '[module:DapperAot]')"),
        DapperLegacyTupleParameter = LibraryWarning("DAP006", "Dapper tuple-type parameter", "Dapper (original) does not work well with tuple-type parameters as name information is inaccessible"),
        UnexpectedCommandType = LibraryInfo("DAP007", "Unexpected command type", "The command type specified is not understood"),
        // space
        UnexpectedArgument = LibraryInfo("DAP009", "Unexpected parameter", "The parameter '{0}' is not understood"),
        // space
        DapperLegacyBindNameTupleResults = LibraryWarning("DAP011", "Named-tuple results", "Dapper (original) does not support tuple results with bind-by-name semantics"),
        DapperAotAddBindTupleByName = LibraryWarning("DAP012", "Add BindTupleByName", "Because of differences in how Dapper and Dapper.AOT can process tuple-types, please add '[BindTupleByName({true|false})]' to clarify your intent"),
        DapperAotTupleResults = LibraryInfo("DAP013", "Tuple-type results", "Tuple-type results are not currently supported"),
        DapperAotTupleParameter = LibraryInfo("DAP014", "Tuple-type parameter", "Tuple-type parameters are not currently supported"),
        UntypedParameter = LibraryInfo("DAP015", "Untyped parameter", "The parameter type could not be resolved"),
        GenericTypeParameter = LibraryInfo("DAP016", "Generic type parameter", "Generic type parameters ({0}) are not currently supported"),
        NonPublicType = LibraryInfo("DAP017", "Non-accessible type", "Type '{0}' is not accessible; {1} types are not currently supported"),
        SqlParametersNotDetected = SqlWarning("DAP018", "SQL parameters not detected", "Parameters are being supplied, but no parameters were detected in the command"),
        NoParametersSupplied = SqlWarning("DAP019", "No parameters supplied", "SQL parameters were detected, but no parameters are being supplied", true),
        SqlParameterNotBound = SqlWarning("DAP020", "SQL parameter not bound", "No member could be found for the SQL parameter '{0}' from type '{1}'"),
        DuplicateParameter = LibraryWarning("DAP021", "Duplicate parameter", "Members '{0}' and '{1}' both have the database name '{2}'; '{0}' will be ignored"),
        DuplicateReturn = LibraryWarning("DAP022", "Duplicate return parameter", "Members '{0}' and '{1}' are both designated as return values; '{0}' will be ignored"),
        DuplicateRowCount = LibraryWarning("DAP023", "Duplicate row-count member",
            "Members '{0}' and '{1}' are both marked [RowCount]"),
        RowCountDbValue = LibraryWarning("DAP024", "Member is both row-count and mapped value",
            "Member '{0}' is marked both [RowCount] and [DbValue]; [DbValue] will be ignored"),
        ExecuteCommandWithQuery = SqlWarning("DAP025", "Execute command with query", "The command has a query that will be ignored"),
        QueryCommandMissingQuery = SqlError("DAP026", "Query/scalar command lacks query", "The command lacks a query"),
        UseSingleRowQuery = PerformanceWarning("DAP027", "Use single-row query", "Use {0}() instead of Query(...).{1}()"),
        UseQueryAsList = PerformanceWarning("DAP028", "Use AsList instead of ToList", "Use Query(...).AsList() instead of Query(...).ToList()"),
        MethodRowCountHintRedundant = LibraryInfo("DAP029", "Method-level row-count hint redundant", "The [EstimatedRowCount] will be ignored due to parameter member '{0}'"),
        MethodRowCountHintInvalid = LibraryError("DAP030", "Method-level row-count hint invalid",
            "The [EstimatedRowCount] parameters are invalid; a positive integer must be supplied"),
        MemberRowCountHintInvalid = LibraryError("DAP031", "Member-level row-count hint invalid",
            "The [EstimatedRowCount] parameters are invalid; no parameter should be supplied"),
        MemberRowCountHintDuplicated = LibraryError("DAP032", "Member-level row-count hint duplicated",
            "Only a single member should be marked [EstimatedRowCount]"),
        CommandPropertyNotFound = LibraryWarning("DAP033", "Command property not found",
            "Command property {0}.{1} was not found or was not valid; attribute will be ignored"),
        CommandPropertyReserved = LibraryWarning("DAP034", "Command property reserved",
            "Command property {1} is reserved for internal usage; attribute will be ignored"),
        TooManyDapperAotEnabledConstructors = LibraryError("DAP035", "Too many Dapper.AOT enabled constructors",
            "Only one constructor can be Dapper.AOT enabled per type '{0}'"),
        TooManyStandardConstructors = LibraryError("DAP036", "Type has more than 1 constructor to choose for creating an instance",
            "Type has more than 1 constructor, please, either mark one constructor with [DapperAot] or reduce amount of constructors"),
        UserTypeNoSettableMembersFound = LibraryError("DAP037", "No settable members exist for user type",
            "Type '{0}' has no settable members (fields or properties)"),
        ValueTypeSingleFirstOrDefaultUsage = LibraryWarning("DAP038", "Value-type single row 'OrDefault' usage",
            "Type '{0}' is a value-type; it will not be trivial to identify missing rows from {1}"),

        // SQL parse specific
        GeneralSqlError = SqlWarning("DAP200", "SQL error", "SQL error: {0}"),
        MultipleBatches = SqlError("DAP201", "Multiple batches", "Multiple batches are not permitted (L{0} C{1})"),
        DuplicateVariableDeclaration = SqlError("DAP202", "Duplicate variable declaration", "The variable {0} is declared multiple times (L{1} C{2})"),
        GlobalIdentity = SqlError("DAP203", "Do not use @@identity", "@@identity should not be used; prefer SCOPE_IDENTITY() or OUTPUT INSERTED.yourid (L{0} C{1})"),
        SelectScopeIdentity = SqlInfo("DAP204", "Prefer OUTPUT over SELECT", "Consider using OUTPUT INSERTED.yourid in the INSERT instead of SELECT SCOPE_IDENTITY() (L{0} C{1})"),
        NullLiteralComparison = SqlWarning("DAP205", "Null comparison", "Literal null used in comparison; 'is null' or 'is not null' should be preferred (L{0} C{1})"),
        ParseError = SqlError("DAP206", "SQL parse error", "{0} (#{1} L{2} C{3})"),
        ScalarVariableUsedAsTable = SqlError("DAP207", "Scalar used like table", "Scalar variable {0} is used like a table (L{1} C{2})"),
        TableVariableUsedAsScalar = SqlError("DAP208", "Table used like scalar", "Table-variable {0} is used like a scalar (L{1} C{2})"),
        TableVariableAccessedBeforePopulate = SqlError("DAP209", "Table used before populate", "Table-variable {0} is accessed before it populated (L{1} C{2})"),
        VariableAccessedBeforeAssignment = SqlError("DAP210", "Variable used before assigned", "Variable {0} is accessed before it is assigned a value (L{1} C{2})"),
        VariableAccessedBeforeDeclaration = SqlError("DAP211", "Variable used before declared", "Variable {0} is accessed before it is declared (L{1} C{2})"),
        ExecVariable = SqlWarning("DAP212", "EXEC with composed SQL", "EXEC with composed SQL may be susceptible to SQL injection; consider EXEC sp_executesql, taking care to fully parameterize the composed query (L{0} C{1})"),
        VariableValueNotConsumed = SqlWarning("DAP213", "Variable used before declared", "Variable {0} has a value that is not consumed (L{1} C{2})"),
        VariableNotDeclared = SqlError("DAP214", "Variable not declared", "Variable {0} is not declared and no corresponding parameter exists (L{1} C{2})"),
        TableVariableOutputParameter = SqlWarning("DAP215", "Variable used before declared", "Table variable {0} cannot be used as an output parameter (L{1} C{2})"),
        InsertColumnsNotSpecified = SqlWarning("DAP216", "INSERT without target columns", "INSERT should explicitly specify target columns (L{0} C{1})"),
        InsertColumnsMismatch = SqlError("DAP217", "INSERT with mismatched columns", "The INSERT values do not match the target columns (L{0} C{1})"),
        InsertColumnsUnbalanced = SqlError("DAP218", "INSERT with unbalanced rows", "The INSERT rows have different widths (L{0} C{1})"),
        SelectStar = SqlWarning("DAP219", "SELECT with wildcard columns", "SELECT columns should be specified explicitly (L{0} C{1})"),
        SelectEmptyColumnName = SqlWarning("DAP220", "SELECT with missing column name", "SELECT column name is missing: {0} (L{1} C{2})"),
        SelectDuplicateColumnName = SqlWarning("DAP221", "SELECT with duplicate column name", "SELECT column name is duplicated: '{0}' (L{1} C{2})"),
        SelectAssignAndRead = SqlWarning("DAP222", "SELECT with assignment and reads", "SELECT statement assigns variable and performs reads (L{0} C{1})"),
        DeleteWithoutWhere = SqlWarning("DAP223", "DELETE without WHERE", "DELETE statement lacks WHERE clause (L{0} C{1})"),
        UpdateWithoutWhere = SqlWarning("DAP224", "UPDATE without WHERE", "UPDATE statement lacks WHERE clause (L{0} C{1})"),
        FromMultiTableMissingAlias = SqlWarning("DAP225", "Multi-element FROM missing alias", "FROM expressions with multiple elements should use aliases (L{0} C{1})"),
        FromMultiTableUnqualifiedColumn = SqlWarning("DAP226", "Multi-element FROM with unqualified column", "FROM expressions with multiple elements should qualify all columns; it is unclear where '{0}' is located (L{1} C{2})"),
        NonIntegerTop = SqlError("DAP227", "Non-integer TOP", "TOP literals should be integers (L{0} C{1})"),
        NonPositiveTop = SqlError("DAP228", "Non-positive TOP", "TOP literals should be positive (L{0} C{1})"),
        SelectFirstTopError = SqlWarning("DAP229", "SELECT for First* with invalid TOP", "SELECT for First* should use TOP 1 (L{0} C{1})"),
        SelectSingleTopError = SqlWarning("DAP230", "SELECT for Single* with invalid TOP", "SELECT for Single* should use TOP 2; if you do not need to test over-read, use First* (L{0} C{1})"),
        SelectSingleRowWithoutWhere = SqlWarning("DAP231", "SELECT for single row without WHERE", "SELECT for single row without WHERE or (TOP and ORDER BY) (L{0} C{1})");
    }
}
